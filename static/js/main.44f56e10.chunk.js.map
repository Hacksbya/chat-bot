{"version":3,"sources":["App.js","index.js"],"names":["App","prompt","setPrompt","useState","messages","setMessages","savedMessages","localStorage","getItem","JSON","parse","darkMode","setDarkMode","persona","setPersona","showPersonaModal","setShowPersonaModal","messagesEndRef","useRef","chatBoxRef","useEffect","setItem","stringify","current","scrollIntoView","behavior","sendMessage","async","trim","userMsg","type","content","newHistory","response","fetch","method","headers","Content-Type","body","ok","Error","data","json","history","error","console","savePersona","name","updatePersona","formatMessage","replace","React","createElement","className","concat","onClick","removeItem","toggleTheme","next","document","documentElement","classList","toggle","placeholder","defaultValue","onKeyDown","e","key","target","value","previousSibling","ref","length","map","msg","i","toUpperCase","dangerouslySetInnerHTML","__html","onChange","shiftKey","preventDefault","rows","viewBox","width","height","stroke","strokeWidth","fill","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","points","container","getElementById","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.44f56e10.chunk.js","sourcesContent":["// src/App.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [prompt, setPrompt] = useState('');\n  const [messages, setMessages] = useState(() => {\n    // Load messages from localStorage if available\n    const savedMessages = localStorage.getItem('chatMessages');\n    return savedMessages ? JSON.parse(savedMessages) : [];\n  });\n  const [darkMode, setDarkMode] = useState(() => {\n    return localStorage.getItem('theme') === 'dark';\n  });\n  const [persona, setPersona] = useState(() => {\n    return localStorage.getItem('chatPersona') || '';\n  });\n  const [showPersonaModal, setShowPersonaModal] = useState(false);\n  const messagesEndRef = useRef(null);\n  const chatBoxRef = useRef(null);\n\n  // Save messages to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('chatMessages', JSON.stringify(messages));\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  // Scroll to bottom whenever messages change\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const sendMessage = async () => {\n    if (!prompt.trim()) return;\n\n    const userMsg = { type: 'human', content: prompt };\n    const newHistory = [...messages, userMsg];\n    setMessages(newHistory);\n    setPrompt('');\n\n    try {\n      const response = await fetch('http://localhost:5000/chat', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ prompt }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      \n      const data = await response.json();\n      setMessages(data.history);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      // Add error message to chat\n      setMessages([...newHistory, { \n        type: 'bot', \n        content: 'Sorry, there was an error processing your request. Please try again.'\n      }]);\n    }\n  };\n\n  const startNewChat = async () => {\n    try {\n      // Call backend to clear chat history\n      await fetch('http://localhost:5000/clear-chat', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n      });\n      \n      // Clear frontend messages\n      setMessages([]);\n      localStorage.removeItem('chatMessages');\n    } catch (error) {\n      console.error('Error clearing chat:', error);\n    }\n  };\n\n  const toggleTheme = () => {\n    const next = !darkMode;\n    setDarkMode(next);\n    localStorage.setItem('theme', next ? 'dark' : 'light');\n    document.documentElement.classList.toggle('dark', next);\n  };\n\n  const savePersona = (name) => {\n    setPersona(name);\n    localStorage.setItem('chatPersona', name);\n    setShowPersonaModal(false);\n    // Update the system message in backend\n    updatePersona(name);\n  };\n\n  const updatePersona = async (name) => {\n    try {\n      await fetch('http://localhost:5000/update-persona', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ persona: name }),\n      });\n    } catch (error) {\n      console.error('Error updating persona:', error);\n    }\n  };\n\n  const formatMessage = (content) => {\n    return content\n      .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n      .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n      .replace(/```([\\s\\S]*?)```/g, '<pre><code>$1</code></pre>')\n      .replace(/`([^`]+)`/g, '<code>$1</code>')\n      .replace(/^\\s*\\*\\s(.*)$/gm, '<li>$1</li>')\n      .replace(/^\\s*\\d+\\.\\s(.*)$/gm, '<li>$1</li>')\n      .replace(/<li>(.*?)<\\/li>/g, '<ul><li>$1</li></ul>')\n      .replace(/\\n/g, '<br>');\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  return (\n    <div className={`app ${darkMode ? 'dark' : 'light'}`}>\n      <div className=\"header\">\n        <div className=\"logo\">\n          <div className=\"logo-icon\"></div>\n          <h1>myBot</h1>\n        </div>\n        <div className=\"header-actions\">\n          <button onClick={() => setShowPersonaModal(true)} className=\"persona-btn\">\n            {persona ? `👤 ${persona}` : '➕ Add Persona'}\n          </button>\n          <button onClick={startNewChat} className=\"new-chat-btn\">\n            New Chat\n          </button>\n          <button onClick={toggleTheme} className=\"toggle-btn\">\n            {darkMode ? '☀️' : '🌙'}\n          </button>\n        </div>\n      </div>\n      \n      {showPersonaModal && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal\">\n            <h2>Set Your Name</h2>\n            <input\n              type=\"text\"\n              placeholder=\"Enter your name\"\n              defaultValue={persona}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter') savePersona(e.target.value);\n              }}\n            />\n            <div className=\"modal-actions\">\n              <button onClick={() => setShowPersonaModal(false)}>Cancel</button>\n              <button onClick={(e) => savePersona(e.target.previousSibling.value)}>\n                Save\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"chat-container\">\n        <div className=\"chat-box\" ref={chatBoxRef}>\n          {messages.length === 0 && (\n            <div className=\"empty-state\">\n              <div className=\"welcome-message\">\n                <h2>Welcome to Chat-Bot</h2>\n                <p>Start a conversation by entering a prompt!</p>\n              </div>\n            </div>\n          )}\n          \n          {messages.map((msg, i) => (\n            <div key={i} className={`msg ${msg.type === 'human' ? 'human' : 'bot'}`}>\n              {msg.type === 'human' ? (\n                <div className=\"avatar user-avatar\">\n                  {persona ? persona[0].toUpperCase() : '👤'}\n                </div>\n              ) : (\n                <div className=\"avatar bot-avatar\">\n                  🤖\n                </div>\n              )}\n              <div className=\"msg-bubble\">\n                <div \n                  className=\"msg-content\"\n                  dangerouslySetInnerHTML={{ __html: formatMessage(msg.content) }}\n                />\n              </div>\n            </div>\n          ))}\n          <div ref={messagesEndRef} />\n        </div>\n      </div>\n      \n      <div className=\"input-container\">\n        <div className=\"input-box\">\n          <textarea\n            value={prompt}\n            onChange={(e) => setPrompt(e.target.value)}\n            onKeyDown={handleKeyDown}\n            placeholder=\"Type your message...\"\n            rows={1}\n          />\n          <button onClick={sendMessage} className=\"send-btn\">\n            <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" stroke=\"currentColor\" strokeWidth=\"2\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n              <line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line>\n              <polygon points=\"22 2 15 22 11 13 2 9 22 2\"></polygon>\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nconst container = document.getElementById('root');\nconst root = ReactDOM.createRoot(container);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"sourceRoot":""}